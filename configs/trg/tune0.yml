# Electron HLT trigger tune0.yml
#
# -------------------------------------------------------------------

rootname: 'trg'
rngseed: 123456                       # Fixed seed for training data mixing
inputvars: 'mvavars'                  # Main file input description python file

# ----------------------------------------------------
mva_param: &MVA_INPUT_PARAM
  use_conditional: false              # Conditional (theory parametric) input
  primary_classes: [0,1]              # Primary class IDs in MVA (train, ROC etc.)
  signal_class: 1                     # Signal class ID
  #DA_class:    -2                     # Domain Adaptation class
  
  inputvar_scalar:  'MVA_SCALAR_VARS' # 'MVA_SCALAR_VARS' # Input variables, implemented under mvavars.py
  #inputvar_jagged:  null             # 'MVA_JAGGED_VARS'
  #jagged_maxdim:    6
  
  varnorm: null                       # Variable normalization: 'zscore', 'madscore', null
  #varnorm_tensor: 'zscore'           # Tensor variable normalization
  #varnorm_graph: null                # Not implemented yet
  
  frac: [0.7, 0.15, 0.15]             # Train vs validate/test split fraction
  
  # Imputation
  imputation_param:
    active: true                      # True / False
    var: 'MVA_SCALAR_VARS'            # Array of variables to be imputated
    algorithm: 'constant'             # Algorithm type: 'constant', iterative' (vector), knn' (vector), 'mean' (scalar), 'median' (scalar)
    fill_value: -999.0                # For constant imputation
    knn_k: 8                          # Number of nearest neighbours considered
    values: null                      # Special values which indicate the need for imputation, if null, then only Inf/Nan
  
  # # Graph object construction
  # graph_param:
  #   global_on: True
  #   self_loops: True
  #   directed: False
  #   coord: 'pxpypze'                 # 'ptetaphim', 'pxpypze'

  # # ** Image tensor object construction **
  # image_param:

  #   # See the corresponding construction under common.py
  #   channels: 2                 # 1,2,...

  #   # bin-edges
  #   eta_bins: []
  #   phi_bins: []


# ----------------------------------------------------
genesis_runmode:

  maxevents:  null
  inputmap:   null # "mc_input.yml"
  
  mcfile:     'eff.root'
  datafile:   'datadist.root'
  tree_name:  null                    # 'ntuplizer/tree'

  targetfunc: null                    # Training target,    implemented under mctargets.py
  filterfunc: 'filter_standard'       # Training filtering, implemented under mcfilter.py
  cutfunc:    'cut_fiducial'          # Basic cuts,         implemented under cuts.py

  xcorr_flow: True                    # Full N-point correlations computed between cuts
  pickle_size: 1000                   # Number of entries (events) per pickle file


# ----------------------------------------------------
train_runmode:

  <<: *MVA_INPUT_PARAM

  maxevents: null
  modeltag:  null

  ## Reweighting setup
  reweight: true
  reweight_mode: 'write'          # 'write', 'load'
  reweight_file: 'reweight_train.pkl' # differential reweighting model file
  
  reweight_param: &REWEIGHT_PARAM

    maxevents: 100000             # Maximum number of events for the PDF construction
    equal_frac: true              # Equalize integrated class fractions
    differential: true            # Differential reweighting
    reference_class: 0            # Reference class: 0 = (background), 1 = (signal), 2 = (another class) ...
    
    # ---------------------
    
    # Note about asymmetry: Keep the reference class as 0 == background, because signal
    # MC has much longer tail over pt. Thus, it is not possible to re-weight background
    # to signal very easily, but it is possible to re-weight signal to background.
    # This is seen by inspecting the re-weighted distributions with small and large statistics.

    dimension: '2D'                # '2D', 'pseudo-2D', '1D'
    pseudo_type: 'product'         # 'product', 'geometric_mean'
    
    var:   ['x_hlt_pt', 'x_hlt_eta']

    # Make sure the bounds cover the phase space
    bins:  [[0.001, 100.0, 150], [-3.1, 3.1, 150]]
    binmode: ['linear', 'linear']  # 'log10', 'linear' or 'edges' for custom array based binning
    
    # ! Variable, and binning min/max boundaries are both transformed !
    transform: ['log10', null]     # 'log10', 'sqrt', 'square', null

    max_reg: 10000.0               # Maximum weight cut-off regularization


  ## Outlier protection in the training
  outlier_param:
    algo: 'truncate'   # algorithm: 'truncate', null
    qmin: 0.01         # in [0,100] 
    qmax: 99.9         # in [0,100]

  # ** Activate models here **
  # Give all models some unique identifier and label
  models:  !include configs/trg/models.yml
  active_models: &ACTIVE_MODELS
    
    - xgb0
    #- dmlp0
    
    - xgb1
    
    - cut0
    - cut1
    - cut2
    - cut3
    - cut4
    - cut5
    - cut6
    
    - cutset0

  raytune: !include configs/trg/raytune.yml

  # Distillation training
  # -- the order must be compatible with the causal order in 'active_models'
  distillation:

    # Big, sophisticated model
    source:
      xgb0
      
    # Simple, compressed models
    drains:
      - xgb1
      # - add more here

  # Batched "deep" training
  batch_train_param:
    blocksize: 150000   # Maximum number of events simultaneously in RAM
    epochs: 50          # Number of global epochs (1 epoch = one iteration over the full input dataset), same for all models
    #num_cpu: null      # Set null for auto, or an integer for manual.

# ----------------------------------------------------
eval_runmode:

  <<: *MVA_INPUT_PARAM

  maxevents: null
  modeltag:  null
  
  reweight: true
  reweight_mode: 'load'      # 'write', 'load'
  reweight_file: 'reweight_train.pkl'
  
  reweight_param: *REWEIGHT_PARAM

  models:  !include configs/trg/models.yml
  active_models: *ACTIVE_MODELS

# ----------------------------------------------------
plot_param: !include configs/trg/plots.yml

